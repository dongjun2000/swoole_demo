<?php

/**
 * CSP 编程方式
 * 
 * CSP 编程：
 *      1.不同于传统的通过共享内存来通信，CSP 讲究以通信的方式来共享内存。
 *      2.Swoole 使用到了 CSP 里面的部分概念，参考了 Golang 的实现，使用 go 协程作为执行体，
 *          用 Chan 作为实体间通信的通道，Defer 在协程退出时执行。
 *          
 * Swoole 协程特点：
 *      1.应用层使用同步的编程方式，底层自动实现异步 IO 的效果和性能。
 *      2.不需要在应用层使用 yield 关键字标识协程切换，易于使用。
 *      3.默认开启了 enable_coroutine 选项，底层会在一些 回调函数 中自动创建一个协程，此时回调中使用协程 API。
 *      4.使用 Coroutine::create() 或者 go 方法来手动创建一个协程。
 *      5.协程的切换是隐式发生的，所以协程切换前后不保证全局变量和静态变量的一致性（不安全）。
 * 
 */

 
// 协程设置
Swoole\Coroutine::set([
    // 设置最大协程数，超过限制后底层将无法创建新的协程。
    'max_coroutine' => 2000,
]);

for ($i = 0; $i < 1000; $i++) {
    go(function () {
        echo 'A';
        // 协程的休眠函数
        co::sleep(5);       // 同步情况下休眠5秒，运行时间需要 5秒 * 1000，协程情况下只需要5秒
        echo 'B';
    });
}